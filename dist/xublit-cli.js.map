{"version":3,"sources":["../src/xublit-cli.es6"],"names":[],"mappings":";;;;;;;;;;IAAY;;;;IACA;;;;;;;;IAGA;;;;;;;;;;;;;;;;;;;;;;;;;;AAQZ,IAAM,kBAAkB;AACpB,SAAK,QAAQ,GAAR,EAAL;AACA,iBAAa,KAAK,OAAL,CAAa,SAAb,EAAwB,IAAxB,CAAb;CAFE;;IAKe;AAEjB,aAFiB,SAEjB,CAAa,IAAb,EAAmB;8BAFF,WAEE;;AAEf,eAAO,QAAQ,EAAR,CAFQ;;AAIf,kBAAU,IAAV,EAAgB,IAAhB,EAJe;;AAMf,gBAAQ,IAAR,EANe;KAAnB;;iBAFiB;;+CAYO;;AAEpB,gBAAI,KAAK,GAAL,uCAAJ,EAA2C;AACvC,uBADuC;aAA3C;;AAIA,kBAAM,IAAI,KAAJ,CAAU,KAAK,MAAL,CACZ,oCADY,EAEZ,KAAK,GAAL,CAFE,CAAN,CANoB;;;;WAZP;;;;;;AA2BrB,SAAS,OAAT,CAAkB,SAAlB,EAA6B;;AAEzB,4BAAI,OAAJ,CAAY,UAAU,GAAV,CAAc,OAAd,CAAZ,CAFyB;;AAIzB,4BAAI,KAAJ,CAAU,GAAG,kBAAH,CAAV,CAJyB;;AAMzB,QAAI,gBAAgB,sBAAhB,CANqB;AAOzB,kBAAc,OAAd,CAAsB,UAAC,GAAD,EAAS;AAC3B,gCAAI,EAAJ,CAAO,GAAP,EAAY,YAAM;AACd,gCAAO,GAAP,EAAY,SAAZ,EADc;SAAN,CAAZ,CAD2B;KAAT,CAAtB,CAPyB;;AAazB,4BAAI,KAAJ,CAAU,QAAQ,IAAR,CAAV,CAbyB;CAA7B;;AAiBA,SAAS,SAAT,CAAoB,SAApB,EAA+B,IAA/B,EAAqC;;AAEjC,WAAO,OAAO,MAAP,CAAc,EAAd,EAAkB,eAAlB,EAAmC,IAAnC,CAAP,CAFiC;;AAIjC,QAAI,iBAAJ,CAJiC;;AAMjC,QAAI;AACA,4BAAoB,gCAAsB,KAAK,GAAL,CAA1C,CADA;KAAJ,CAGA,OAAO,KAAP,EAAc;;KAAd;;AAIA,QAAI,mBAAmB,cAAc,iBAAd,GACnB,kBAAkB,aAAlB,GACA,wBAAc,KAAK,GAAL,CAFK,CAbU;;AAiBjC,QAAI,eAAe,yBAAmB,KAAK,WAAL,CAAlC,CAjB6B;AAkBjC,QAAI,gBAAgB,yBAAgB,GAAG,iBAAH,CAAhC,CAlB6B;;AAoBjC,QAAI,gBAAgB,aAAa,aAAb,CApBa;AAqBjC,QAAI,YAAY,cAAc,aAAd,CAA4B,KAAK,KAAL,CAAxC,CArB6B;;AAuBjC,WAAO,gBAAP,CAAwB,SAAxB,EAAmC;;AAE/B,aAAK;AACD,iBAAK,eAAY;AACb,uBAAO,iBAAP,CADa;aAAZ;SADT;;AAMA,aAAK;AACD,iBAAK,eAAY;AACb,+CADa;aAAZ;SADT;;AAMA,mBAAW;AACP,mBAAO,YAAP;SADJ;;AAIA,aAAK;AACD,mBAAO,SAAP;SADJ;;AAIA,aAAK;AACD,iBAAK,eAAY;AACb,uBAAO,iBAAiB,QAAjB,EAAP,CADa;aAAZ;AAGL,iBAAK,aAAU,QAAV,EAAoB;;AAErB,oBAAI,CAAC,QAAD,EAAW;AACX,2BADW;iBAAf;;AAIA,oBAAI,sBAAsB,wBAAc,QAAd,CAAtB,CANiB;;AAQrB,oBAAI,oBAAoB,YAApB,CAAiC,GAAG,sBAAH,CAArC,EAAiE;AAC7D,wCAAoB,gCAChB,iBAAiB,OAAjB,CADJ,CAD6D;;AAK7D,0CAAsB,kBAAkB,aAAlB,CALuC;iBAAjE;;AASA,mCAAmB,mBAAnB,CAjBqB;aAApB;SAJT;;AA0BA,uBAAe;AACX,mBAAO,aAAP;SADJ;;AAIA,0BAAkB;AACd,mBAAO,gBAAP;SADJ;;KApDJ,EAvBiC;CAArC","file":"xublit-cli.js","sourcesContent":["import * as util from 'util';\nimport * as path from 'path';\nimport cli from 'commander-plus';\n\nimport * as __ from './constants';\nimport Directory from './file-system/directory';\nimport XublitApplication from './xublit-application';\nimport NpmPackageRoot from './file-system/npm-pkg-root';\nimport CliTempRoot from './file-system/cli-tmp-root';\n\nimport { run as runCmd, list as listCmds } from './cmd-runner';\n\nconst DEFAULT_OPTIONS = {\n    pwd: process.cwd(),\n    cliRootPath: path.resolve(__dirname, '..'),\n};\n\nexport default class XublitCli {\n\n    constructor (opts) {\n\n        opts = opts || {};\n\n        initProps(this, opts);\n\n        initCli(this);\n\n    }\n\n    assertXublitAppInPwd () {\n\n        if (this.app instanceof XublitApplication) {\n            return;\n        }\n        \n        throw new Error(util.format(\n            'Xublit Application not found in %s',\n            this.pwd\n        ));\n        \n    }\n\n}\n\nfunction initCli (xublitCli) {\n\n    cli.version(xublitCli.pkg.version);\n\n    cli.usage(__.USAGE_INSTRUCTIONS);\n\n    var availableCmds = listCmds();\n    availableCmds.forEach((cmd) => {\n        cli.on(cmd, () => {\n            runCmd(cmd, xublitCli);\n        });\n    });\n\n    cli.parse(process.argv);\n\n}\n\nfunction initProps (xublitCli, opts) {\n\n    opts = Object.assign({}, DEFAULT_OPTIONS, opts);\n\n    var xublitApplication;\n\n    try {\n        xublitApplication = new XublitApplication(opts.pwd);\n    }\n    catch (error) {\n        // fail silently\n    }\n\n    var workingDirectory = undefined !== xublitApplication ?\n        xublitApplication.rootDirectory :\n        new Directory(opts.pwd);\n    \n    var cliDirectory = new NpmPackageRoot(opts.cliRootPath);\n    var tempDirectory = new CliTempRoot(__.TMP_DATA_DIR_PATH);\n\n    var npmConfigFile = cliDirectory.npmConfigFile;\n    var npmConfig = npmConfigFile.parseContents(JSON.parse);\n\n    Object.defineProperties(xublitCli, {\n\n        app: {\n            get: function () {\n                return xublitApplication;\n            },\n        },\n\n        cli: {\n            get: function () {\n                return cli;\n            },\n        },\n\n        directory: {\n            value: cliDirectory,\n        },\n\n        pkg: {\n            value: npmConfig,\n        },\n\n        pwd: {\n            get: function () {\n                return workingDirectory.toString();\n            },\n            set: function (newValue) {\n                \n                if (!newValue) {\n                    return;\n                }\n\n                var newWorkingDirectory = new Directory(newValue);\n\n                if (newWorkingDirectory.containsFile(__.XUBLIT_CONFIG_FILENAME)) {\n                    xublitApplication = new XublitApplication(\n                        workingDirectory.absPath\n                    );\n                    \n                    newWorkingDirectory = xublitApplication.rootDirectory;\n\n                }\n\n                workingDirectory = newWorkingDirectory;\n\n            },\n        },\n\n        tempDirectory: {\n            value: tempDirectory,\n        },\n\n        workingDirectory: {\n            value: workingDirectory,\n        },\n\n    });\n\n}\n"]}