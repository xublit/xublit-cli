{"version":3,"sources":["../../src/cli-tools/app-initialiser.es6"],"names":[],"mappings":"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","file":"app-initialiser.js","sourcesContent":["import EventEmitter from 'events';\nimport * as sh from 'shelljs';\n\nimport * as __ from '../constants';\nimport InteractiveCli from './interactive-cli';\nimport Directory from '../file-system/directory';\n\nconst Prompt = InteractiveCli.Prompt();\nconst Confirm = InteractiveCli.Confirm();\n\nconst DEFAULT_APP_VERSION = '1.0.0';\nconst DEFAULT_LICENSE = 'UNLICENSED';\n\nconst EVENT_ACTION_SUCCESS = 'successfulAction';\nconst EVENT_CRITICAL_ERROR = 'criticalError';\nconst EVENT_INIT_ABORTED = 'abort';\nconst EVENT_INIT_COMPLETE = 'complete';\nconst EVENT_INITIALISING = 'initialising';\n\nexport class AppInitialiser extends EventEmitter {\n\n    constructor (xublitCli) {\n        \n        super();\n\n        initProps(this, xublitCli);\n\n    }\n\n    interactive () {\n\n        var interactiveCli = new InteractiveCli(this.cli);\n\n        var interactions = standardInteractions(this);\n\n        interactiveCli\n            .queueInteractions(interactions)\n            .provideInterface()\n            .then((choices) => {\n                initialiseApp(this, choices);\n            });\n\n    }\n\n}\n\nfunction initProps (appInitialiser, xublitCli) {\n\n    Object.defineProperties(appInitialiser, {\n\n        appRoot: {\n            value: xublitCli.workingDirectory,\n        },\n\n        cli: {\n            value: xublitCli.cli,\n        },\n\n        xublitCli: {\n            value: xublitCli,\n        },\n\n    });\n\n}\n\nfunction abort (appInitialiser, reason) {\n    appInitialiser.emit(EVENT_INIT_ABORTED, reason);\n}\n\nfunction initialiseApp (appInitialiser, options, installModules) {\n\n    var xublitCli = appInitialiser.xublitCli;\n\n    var appName = options.name;\n    var appRoot = appInitialiser.appRoot;\n\n    if (appRoot.containsFile('package.json') &&\n        false === options.overwritePackageJson) {\n        return abort(appInitialiser);\n    }\n\n    emit(EVENT_INITIALISING);\n\n    npmInit(appRoot)\n        .then(function initAppPkgJson () {\n\n            emit(EVENT_ACTION_SUCCESS, '`npm init` complete');\n\n            appRoot.refresh();\n\n            let appPkgJsonFile = appRoot.file('package.json');\n            let appPkgJson = appPkgJsonFile.parseContents(JSON.parse);\n\n            Object.assign(appPkgJson, {\n                name: options.name,\n                version: options.version,\n                description: options.description,\n                author: options.author,\n                license: options.license,\n            });\n\n            appPkgJson.scripts.start = 'xublit start';\n\n            appPkgJsonFile.contents = JSON.stringify(appPkgJson, undefined, '  ');\n\n        })\n        .then(function initAppConfig () {\n\n            emit(EVENT_ACTION_SUCCESS, 'package.json initialised');\n\n            if (!appRoot.containsFile('xublit.json')) {\n                appRoot.mkfile('xublit.json');\n            }\n\n            let appCfgJsonFile = appRoot.file('xublit.json');\n            let appCfgJson = JSON.parse(appCfgJsonFile.contents || '{}');\n\n            Object.assign(appCfgJson, {\n                dirs: {\n                    [__.ETC_DIRS_CONFIG_KEY]: 'etc',\n                    [__.SOURCE_DIRS_CONFIG_KEY]: 'src',\n                    [__.TEST_SPEC_DIRS_CONFIG_KEY]: 'test/spec',\n                },\n                modules: {},\n            });\n\n            appCfgJsonFile.contents = JSON.stringify(appCfgJson, undefined, '  ');\n\n\n        })\n        .then(function initAppDirStructure () {\n\n            emit(EVENT_ACTION_SUCCESS, 'xublit.json initialised');\n\n            let skelName = 'app';\n\n            let cliDirectory = xublitCli.directory;\n            let skelDirectory = cliDirectory.subdir('skel');\n            let sourceDirectory = skelDirectory.subdir(skelName);\n\n            sourceDirectory.subdirs.forEach(function (dirBasename) {\n\n                let src = sourceDirectory.prefixPath(dirBasename);\n                let dest = appRoot.prefixPath(dirBasename);\n\n                sh.cp('-R', src, dest);\n\n            });\n\n        })\n        .then(function installDefaultModules () {\n\n            emit(EVENT_ACTION_SUCCESS, 'directory structure initialised');\n\n            installModules = installModules || [];\n\n            if (0 === installModules.length) {\n                return;\n            }\n            \n            let installCmd = util.format(\n                'xublit install %s',\n                installModules.join(' ')\n            );\n\n            return new Promise(function (resolve, reject) {\n\n                sh.exec(installCmd, { cwd: pwd }, function (code, stdout, stderr) {\n                    \n                    if (0 === code) {\n                        emit(EVENT_ACTION_SUCCESS, 'optional modules installed successfully');\n                        return resolve();\n                    }\n\n                    resolve();\n\n                });\n\n            });\n\n\n        })\n        .then(function () {\n            emit(EVENT_INIT_COMPLETE, appName);\n        })\n        .catch(function (error) {\n            emit(EVENT_CRITICAL_ERROR, error);\n        });\n\n    function emit () {\n        appInitialiser.emit(...arguments);\n    }\n\n}\n\nfunction npmInit (appRoot) {\n\n    var execOptions = {\n        cwd: appRoot.absPath,\n        silent: true,\n    };\n\n    return new Promise(function (resolve, reject) {\n\n        sh.exec('npm init --yes', execOptions, cb);\n\n        function cb (code, stdout, stderr) {\n\n            if (0 !== code) {\n                return reject(util.format(\n                    'Exited with code %s:\\n%s', code, stderr\n                ));\n            }\n\n            resolve(appRoot.refresh());\n\n        }\n\n    });\n\n}\n\nfunction newPrompt (id, opts) {\n    return new Prompt(id, opts);\n}\n\nfunction newConfirm (id, opts) {\n    return new Confirm(id, opts);\n}\n\nfunction standardInteractions (appInitialiser) {\n\n    var appRoot = appInitialiser.appRoot;\n\n    var interactions = [\n        newPrompt('name', { defaultValue: appRoot.basename }),\n        newPrompt('version', { defaultValue: DEFAULT_APP_VERSION }),\n        newPrompt('license', { defaultValue: DEFAULT_LICENSE }),\n        newPrompt('author'),\n    ];\n\n    if (appRoot.containsFile('package.json')) {\n        interactions.push(newConfirm('overwritePackageJson', {\n            phrase: 'This will overwrite existing settings in package.json, continue?',\n            defaultValue: false,\n        }));\n    }\n\n    return interactions;\n\n}\n"]}