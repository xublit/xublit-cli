{"version":3,"sources":["../../../src/cli-tools/interactive-cli/interaction-queue.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;IAEqB;AAEjB,aAFiB,gBAEjB,CAAa,SAAb,EAAwB;8BAFP,kBAEO;;AAEpB,kBAAU,IAAV,EAAgB,SAAhB,EAFoB;KAAxB;;iBAFiB;;4BAQZ,aAAa;;AAEd,gBAAI,EAAE,6CAAF,EAAuC;AACvC,sBAAM,IAAI,SAAJ,CACF,0DADE,CAAN,CADuC;aAA3C;;AAMA,iBAAK,YAAL,CAAkB,IAAlB,CAAuB,WAAvB,EARc;;AAUd,mBAAO,IAAP,CAVc;;;;qCAcJ;;AAEV,gBAAI,YAAY,KAAK,SAAL,CAFN;AAGV,gBAAI,eAAe,KAAK,YAAL,CAHT;AAIV,gBAAI,uBAAuB,CAAvB,CAJM;;AAMV,gBAAI,UAAU,EAAV,CANM;;AAQV,mBAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;;AAEpC,yBAAS,sBAAT,GAAmC;;AAE/B,wBAAI,wBAAwB,aAAa,MAAb,EAAqB;AAC7C,+BAAO,QAAQ,OAAR,CAAP,CAD6C;qBAAjD;;AAIA,wBAAI,cAAc,aAAa,oBAAb,CAAd,CAN2B;;AAQ/B,2BAAO,YACF,WADE,CACU,SADV,EAEF,IAFE,CAEG,UAAU,MAAV,EAAkB;AACpB,gCAAQ,YAAY,EAAZ,CAAR,GAA0B,MAA1B,CADoB;AAEpB,+CAFoB;AAGpB,iDAHoB;qBAAlB,CAFV,CAR+B;iBAAnC;;AAkBA,yCACK,KADL,CACW,UAAU,SAAV,EAAqB;AACxB,2BAAO,SAAP,EADwB;iBAArB,CADX,CApBoC;aAArB,CAAnB,CARU;;;;WAtBG;;;;;;AA6DrB,SAAS,SAAT,CAAoB,gBAApB,EAAsC,SAAtC,EAAiD;;AAE7C,QAAI,eAAe,EAAf,CAFyC;;AAI7C,WAAO,cAAP,CAAsB,gBAAtB,EAAwC,cAAxC,EAAwD;AACpD,eAAO,YAAP;KADJ,EAJ6C;;AAQ7C,WAAO,cAAP,CAAsB,gBAAtB,EAAwC,WAAxC,EAAqD;AACjD,eAAO,SAAP;KADJ,EAR6C;CAAjD","file":"interaction-queue.js","sourcesContent":["import Interaction from './interaction';\n\nexport default class InteractionQueue {\n\n    constructor (commander) {\n\n        initProps(this, commander);\n\n    }\n\n    add (interaction) {\n\n        if (!(interaction instanceof Interaction)) {\n            throw new TypeError(\n                'Invalid interaction - must be an instance of Interaction'\n            );\n        }\n\n        this.interactions.push(interaction);\n\n        return this;\n\n    }\n\n    performAll () {\n\n        var commander = this.commander;\n        var interactions = this.interactions;\n        var nextInteractionIndex = 0;\n\n        var results = {};\n\n        return new Promise((resolve, reject) => {\n\n            function performNextInteraction () {\n\n                if (nextInteractionIndex >= interactions.length) {\n                    return resolve(results);\n                }\n\n                let interaction = interactions[nextInteractionIndex];\n\n                return interaction\n                    .getResponse(commander)\n                    .then(function (result) {\n                        results[interaction.id] = result;\n                        nextInteractionIndex++;\n                        performNextInteraction();\n                    });\n\n            }\n\n            performNextInteraction()\n                .catch(function (rejection) {\n                    reject(rejection);\n                });\n\n        });\n\n    }\n\n}\n\nfunction initProps (interactionQueue, commander) {\n\n    var interactions = [];\n\n    Object.defineProperty(interactionQueue, 'interactions', {\n        value: interactions,\n    });\n\n    Object.defineProperty(interactionQueue, 'commander', {\n        value: commander,\n    });\n    \n}\n"]}