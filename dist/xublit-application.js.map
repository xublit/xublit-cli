{"version":3,"sources":["../src/xublit-application.es6"],"names":[],"mappings":"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","file":"xublit-application.js","sourcesContent":["import * as path from 'path';\n\nimport * as __ from './constants';\nimport ProcessManager from './proc-manager';\nimport ApplicationRoot from './file-system/app-root';\n\nconst jsFilePathRegExp = /.+\\.(js|node)$/;\nconst envConfigFilePathRegExp = /(\\/|\\\\)env(\\/|\\\\).+\\.(yml|yaml)$/;\n\nexport default class XublitApplication {\n\n    constructor (absolutePath) {\n\n        if (!XublitApplication.isApplicationDirectory(absolutePath)) {\n            throw new Error(util.format(\n                'Xublit Application not found in %s', absolutePath\n            ));\n        }\n\n        initProps(this, absolutePath);\n\n        initProcessManager(this);\n\n    }\n\n    static isApplicationDirectory (absolutePath) {\n\n        try {\n            var applicationRoot = new ApplicationRoot(absolutePath);\n        }\n        catch (error) {\n\n            if (__.INVALID_XUBLIT_APPLICATION_ROOT === error.message) {\n                return false;\n            }\n\n            throw error;\n\n        }\n\n        return true;\n\n    }\n\n    calcStats () {\n        return {\n            [__.STAT_KEY_CONFIGURED_ENVS]: this.numConfiguredEnvs,\n            [__.STAT_KEY_SOURCE_FILES]: this.numSourceFiles,\n            [__.STAT_KEY_TEST_SPECS]: this.numTestSpecs,\n        };\n    }\n\n    initAppProcess () {\n\n        this.processManager.initNewNodeProcess(\n            path.join(__dirname, 'app-instance.js')\n        );\n\n        return this;\n\n    }\n\n    start () {\n\n        this.doPreflightChecks()\n            .initAppProcess();\n\n        return this;\n\n    }\n\n    doPreflightChecks () {\n\n        var rootDirectory = this.rootDirectory;\n\n        if (!rootDirectory.containsDir('node_modules')) {\n            throw new Error(\n                'Dir \"node_modules\" not found, please run `$ npm install` first'\n            );\n        }\n\n        return this;\n\n    }\n\n}\n\nfunction initProcessManager (xublitApplication) {\n    xublitApplication.processManager = new ProcessManager(xublitApplication);\n}\n\nfunction initProps (xublitApplication, absolutePath) {\n\n    var processManager;\n\n    var applicationRoot = new ApplicationRoot(absolutePath);\n\n    var xublitConfig = applicationRoot.xublitConfigFile.parseContents(JSON.parse);\n    var npmConfig = applicationRoot.npmConfigFile.parseContents(JSON.parse);\n\n    Object.defineProperties(xublitApplication, {\n\n        rootDirectory: {\n            value: applicationRoot,\n        },\n\n        processManager: {\n            get: function () {\n                return processManager;\n            },\n            set: function (newValue) {\n                \n                if (undefined !== processManager) {\n                    return;\n                }\n                \n                processManager = newValue;\n\n            },\n        },\n\n        config: {\n            get: function () {\n                return xublitConfig;\n            },\n        },\n\n        srcDirs: {\n            get: function () {\n                return asArray(xublitConfig.dirs[__.SOURCE_DIRS_CONFIG_KEY]);\n            },\n        },\n\n        etcDirs: {\n            get: function () {\n                return asArray(xublitConfig.dirs[__.ETC_DIRS_CONFIG_KEY]);\n            },\n        },\n\n        testSpecDirs: {\n            get: function () {\n                return asArray(xublitConfig.dirs[__.TEST_SPEC_DIRS_CONFIG_KEY]);\n            },\n        },\n\n        numConfiguredEnvs: {\n            get: function () {\n\n                let count = 0;\n                let paths = [];\n\n                this.etcDirs.forEach((subdir) => {\n                    paths.push(...applicationRoot.recursiveLs(subdir));\n                });\n\n                paths.forEach((path) => {\n\n                    if (!envConfigFilePathRegExp.test(path)) {\n                        return;\n                    }\n\n                    count++;\n\n                });\n\n                return count;\n\n            },\n        },\n\n        numSourceFiles: {\n            get: function () {\n\n                let count = 0;\n                let paths = [];\n\n                this.srcDirs.forEach((subdir) => {\n                    paths.push(...applicationRoot.recursiveLs(subdir));\n                });\n\n                paths.forEach((path) => {\n\n                    if (!jsFilePathRegExp.test(path)) {\n                        return;\n                    }\n\n                    count++;\n\n                });\n\n                return count;\n\n            },\n        },\n\n        numTestSpecs: {\n            get: function () {\n\n                let count = 0;\n                let paths = [];\n\n                this.testSpecDirs.forEach((subdir) => {\n                    paths.push(...applicationRoot.recursiveLs(subdir));\n                });\n\n                paths.forEach((path) => {\n\n                    if (!jsFilePathRegExp.test(path)) {\n                        return;\n                    }\n\n                    count++;\n\n                });\n\n                return count;\n\n            },\n        },\n\n        npmConfig: {\n            get: function () {\n                return npmConfig;\n            },\n        },\n\n    });\n\n}\n\nfunction asArray (input) {\n\n    if (Array.isArray(input)) {\n        return input;\n    }\n\n    return [input];\n\n}\n"]}