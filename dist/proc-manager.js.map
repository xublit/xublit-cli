{"version":3,"sources":["../src/proc-manager.es6"],"names":[],"mappings":"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","file":"proc-manager.js","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as __ from './constants';\n\nimport { fork } from 'child_process';\n\nimport ProcessControlInterface from './proc-ctrl-interface';\nimport IoId from './proc-io-id';\n\nimport TimeDifferential from './utils/time-differential';\n\nconst REGEXP_PROC_INFO_FILENAME = /^proc\\-([a-z0-9]+)\\.json$/i;\n\nexport default class ProcessManager {\n\n    constructor (xublitCli) {\n\n        initProps(this, xublitCli);\n\n    }\n\n    listXublitProcessIds () {\n\n        var allProcDirFilenames = this.processDirectory.filenames;\n        var procFilenames = allProcDirFilenames.filter(function (filename) {\n            return REGEXP_PROC_INFO_FILENAME.test(filename);\n        });\n\n        return procFilenames.map(function (procFilename) {\n            return procFilename.match(REGEXP_PROC_INFO_FILENAME)[1];\n        });\n\n    }\n\n    statProcess (xublitProcessId) {\n\n        var procFile;\n        var filename = procIdToFilename(xublitProcessId);\n\n        if (!this.processDirectory.containsFile(filename)) {\n            return undefined;\n        }\n\n        procFile = this.processDirectory.file(filename);\n\n        try {\n            let stats = JSON.parse(procFile.contents);\n            stats.uptime = timeSince(stats.startedAt);\n            return stats;\n        }\n        catch (e) {\n            console.log(e.stack);\n        }\n\n    }\n\n    initNewNodeProcess (pwd, absPath) {\n\n        if (!path.isAbsolute(absPath)) {\n            throw new Error(`First argument must be an absolute path`);\n        }\n\n        var appRootPath = pwd.absPath;\n        var processDirectory = this.processDirectory;\n\n        var xublitProcessId = new IoId();\n        \n        var stdio = createProcessFilesFor(xublitProcessId)\n            .in(this.processDirectory);\n\n        var args = [];\n        var opts = {\n            detached: true,\n            stdio: [\n                stdio.in,\n                stdio.out,\n                stdio.err,\n            ],\n            env: {\n                pwd: appRootPath,\n            },\n        };\n\n        var childProcess = fork(absPath, args, opts);\n        var pid = getPidFor(childProcess);\n\n        childProcess.unref();\n\n        var now = Date.now();\n        var procInfo = {\n            pid: pid,\n            xublitPid: xublitProcessId.value,\n            appRoot: appRootPath,\n            startedAt: now,\n            stoppedAt: null,\n        };\n\n        var procInfoFile = processDirectory.mkfile(\n            procIdToFilename(xublitProcessId)\n        );\n\n        procInfoFile.contents = JSON.stringify(procInfo, undefined, '  ');\n\n        return new ProcessControlInterface(procInfoFile);\n\n    }\n\n}\n\nfunction createProcessFilesFor (xublitProcessId) {\n\n    var stdInFilename = `${xublitProcessId}.in`;\n    var stdOutFilename = `${xublitProcessId}.out`;\n    var stdErrFilename = `${xublitProcessId}.err`;\n\n    return {\n        in: function (directory) {\n            return {\n                in: fs.openSync(directory.mkfile(stdInFilename).absPath, 'a'),\n                out: fs.openSync(directory.mkfile(stdOutFilename).absPath, 'a'),\n                err: fs.openSync(directory.mkfile(stdErrFilename).absPath, 'a'),\n            };\n        },\n    };\n\n}\n\nfunction getPidFor (childProcess) {\n    return childProcess.pid;\n}\n\nfunction kill (pid, signal) {\n\n}\n\nfunction procIdToFilename (xublitProcessId) {\n    return `proc-${xublitProcessId}.json`;\n}\n\nfunction initProps (processManager, xublitCli) {\n\n    var dataDirectory = xublitCli.dataDirectory;\n    var processDirectory = dataDirectory.procSubdir;\n\n    Object.defineProperties(processManager, {\n\n        xublitCli: {\n            value: xublitCli,\n        },\n\n        running: {\n            get: function () {\n                \n                var xublitProcessIds = processManager.listXublitProcessIds();\n\n                var processes = xublitProcessIds.map((xublitProcessId) => {\n                    return processManager.statProcess(xublitProcessId);\n                });\n\n                return processes.filter((proc) => {\n\n                    if (undefined === proc) {\n                        return false;\n                    }\n\n                    if (null !== proc.stoppedAt) {\n                        return false;\n                    }\n\n                    return true;\n\n                });\n\n            },\n        },\n\n        processDirectory: {\n            value: processDirectory,\n        },\n\n    });\n\n}\n\nfunction listOfProcessesIn (processDirectory) {\n    return processDirectory.files.filter(function (processFileName) {\n        return /[0-9a-z]+]\\.json/.test(processFileName);\n    });\n}\n\nfunction timeSince (ms) {\n    return new TimeDifferential(Date.now(), ms);\n}\n"]}