{"version":3,"sources":["../src/proc-manager.es6"],"names":[],"mappings":";;;;;;;;;;IAAY;;;;;;;;;;;;;;;;;;AAOZ,IAAM,mBAAmB,GAAG,wBAAH;AACzB,IAAM,oBAAoB,GAAG,yBAAH;;IAEL;AAEjB,aAFiB,cAEjB,CAAa,iBAAb,EAAgC;;;;;;8BAFf,gBAEe;KAAhC;;iBAFiB;;2CAUG,SAAS;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAVZ;;;;;;AA0CrB,SAAS,aAAT,CAAwB,eAAxB,EAAyC;;;;;;;;;;;;;;CAAzC;;AAgBA,SAAS,MAAT,CAAiB,YAAjB,EAA+B;AAC3B,WAAO,aAAa,GAAb,CADoB;CAA/B;;AAIA,SAAS,IAAT,CAAe,GAAf,EAAoB,MAApB,EAA4B,EAA5B;;AAIA,SAAS,uBAAT,CAAkC,iBAAlC,EAAqD;;AAEjD,QAAI,kBAAkB,OAAlB,CAA0B,YAA1B,CAAuC,gBAAvC,CAAJ,EAA8D;AAC1D,eAD0D;KAA9D;;AAIA,QAAI,YAAY,KAAK,GAAL,EAAZ,CAN6C;AAOjD,QAAI,UAAU,UAAU,MAAV,CAAiB,gBAAjB,CAAV,CAP6C;AAQjD,QAAI,WAAW,OAAO,MAAP,CAAc,EAAd,EAAkB,iBAAlB,EAAqC;AAChD,mBAAW,SAAX;AACA,wBAAgB,SAAhB;AACA,cAAM,UAAU,OAAV;KAHK,CAAX,CAR6C;;AAcjD,YAAQ,QAAR,GAAmB,KAAK,SAAL,CAAe,QAAf,EAAyB,SAAzB,EAAoC,IAApC,CAAnB,CAdiD;CAArD;;AAkBA,SAAS,SAAT,CAAoB,cAApB,EAAoC,iBAApC,EAAuD;;AAEnD,QAAI,gBAAgB,kBAAkB,aAAlB,CAF+B;AAGnD,QAAI,UAAU,cAAc,IAAd,CAAmB,gBAAnB,CAAV,CAH+C;AAInD,QAAI,WAAW,QAAQ,aAAR,CAAsB,KAAK,KAAL,CAAjC,CAJ+C;;AAMnD,WAAO,gBAAP,CAAwB,cAAxB,EAAwC;;AAEpC,mBAAW;AACP,iBAAK,eAAY;AACb,uBAAO,SAAS,OAAT,CAAiB,KAAjB,CAAuB,CAAvB,CAAP,CADa;aAAZ;SADT;;AAMA,kBAAU;AACN,mBAAO,QAAP;SADJ;;AAIA,uBAAe;AACX,mBAAO,aAAP;SADJ;;KAZJ,EANmD;CAAvD","file":"proc-manager.js","sourcesContent":["import * as __ from './constants';\n\nimport { fork } from 'child_process';\n\nimport ProcessControlInterface from './proc-ctrl-interface';\nimport IoId from './proc-io-id';\n\nconst REGFILE_FILENAME = __.PROCMGR_REGFILE_FILENAME;\nconst REGISTRY_TEMPLATE = __.PROCMGR_REGISTRY_TEMPLATE;\n\nexport default class ProcessManager {\n\n    constructor (xublitApplication) {\n\n        // initRegfileIfNoneExists(xublitApplication);\n\n        // initProps(this, xublitApplication);\n\n    }\n\n    initNewNodeProcess (absPath) {\n\n        // if (!path.isAbsolute(absPath)) {\n        //     throw new Error('First argument must be an absolute path');\n        // }\n\n        // var stdio = createIoPipes(this.directory);\n\n        // var args = [];\n        // var opts = {\n        //     detached: true,\n        //     stdio: [\n        //         stdio.stdinFilename,\n        //         stdio.stdoutFilename,\n        //         stdio.stderrFilename,\n        //     ],\n        //     env: {\n        //         pwd: this.rootDirectory.absPath,\n        //     },\n        // };\n\n        // var childProcess = fork(absPath, args, opts);\n        // var pid = getPid(childProcess);\n\n        // child.unref();\n\n        // return new ProcessControlInterface(stdio);\n\n    }\n\n}\n\nfunction createIoPipes (targetDirectory) {\n\n    // var ioId = IoId.uniqueIoId(targetDirectory);\n\n    // var stdinFilePath = targetDirectory.mkfile(ioId.stdinFilename).absPath;\n    // var stdoutFilePath = targetDirectory.mkfile(ioId.stdoutFilename).absPath;\n    // var stderrFilePath = targetDirectory.mkfile(ioId.stderrFilename).absPath;\n\n    // return {\n    //     in: fs.openSync(stdinFilePath, 'a'),\n    //     out: fs.openSync(stdoutFilePath, 'a'),\n    //     err: fs.openSync(stderrFilePath, 'a'),\n    // };\n\n}\n\nfunction getPid (childProcess) {\n    return childProcess.pid;\n}\n\nfunction kill (pid, signal) {\n\n}\n\nfunction initRegfileIfNoneExists (xublitApplication) {\n\n    if (xublitApplication.rootDir.containsFile(REGFILE_FILENAME)) {\n        return;\n    }\n\n    var currentTs = Date.now();\n    var regfile = directory.mkfile(REGFILE_FILENAME);\n    var registry = Object.assign({}, REGISTRY_TEMPLATE, {\n        createdAt: currentTs,\n        lastModifiedAt: currentTs,\n        path: directory.absPath,\n    });\n\n    regfile.contents = JSON.stringify(registry, undefined, '  ');\n\n}\n\nfunction initProps (processManager, xublitApplication) {\n\n    var rootDirectory = xublitApplication.rootDirectory;\n    var regfile = rootDirectory.file(REGFILE_FILENAME);\n    var registry = regfile.parseContents(JSON.parse);\n\n    Object.defineProperties(processManager, {\n\n        processes: {\n            get: function () {\n                return registry.running.slice(0);\n            },\n        },\n\n        registry: {\n            value: registry,\n        },\n\n        rootDirectory: {\n            value: rootDirectory,\n        },\n\n    });\n\n}\n\n\n"]}