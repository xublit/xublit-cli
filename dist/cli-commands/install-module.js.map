{"version":3,"sources":["../../src/cli-commands/install-module.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAuEqB;;;AAEjB,aAFiB,oBAEjB,CAAa,SAAb,EAAwB;8BAFP,sBAEO;;sEAFP,iCAIP,YAFc;KAAxB;;iBAFiB;;8BAQV;;AAEH,iBAAK,SAAL,CAAe,oBAAf;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAFG;;WARU","file":"install-module.js","sourcesContent":["// import * as util from 'util';\n// import EventEmitter from 'events';\n\nimport CliCommand from './abstract';\n\n\n// class ModuleInstaller extends EventEmitter {\n\n//     constructor (xublitApplication) {\n\n//         super();\n\n//         initProps(this, xublitApplication);\n\n//     }\n\n//     install (moduleName) {\n\n//         this.emit('install.started', moduleName);\n\n//         npmInstall()\n//             .then(() => {\n//                 this.emit('install.succeeded', moduleName);\n//             })\n//             .catch((error) => {\n//                 this.emit('install.failed', moduleName);\n//             });\n\n//         function npmInstall () {\n\n//         }\n\n//     }\n\n// }\n\n// function npmInstall (moduleName) {\n\n//     var cmd = util.format('npm install --save %s', moduleName);\n\n//     return sh.exec(cmd, { cwd: pwd });\n// }\n\n// function initProps (moduleInstaller, xublitApplication) {\n\n//     var started = [];\n//     var failed = [];\n//     var succeeded = [];\n\n//     Object.defineProperties(moduleInstaller, {\n\n//         xublitApplication: {\n//             value: xublitApplication,\n//         },\n\n//     });\n\n//     moduleInstaller.on('install.started', (moduleName) => {\n//         started.push(moduleName);\n//     });\n\n//     moduleInstaller.on('install.succeeded', (moduleName) => {\n//         succeeded.push(moduleName);\n//     });\n\n//     moduleInstaller.on('install.failed', (moduleName) => {\n//         failed.push(moduleName);\n//     });\n\n// }\n\nexport default class InstallModuleCommand extends CliCommand {\n\n    constructor (xublitCli) {\n\n        super(xublitCli);\n\n    }\n\n    run () {\n\n        this.xublitCli.assertXublitAppInPwd();\n\n        // var app = this.xublitCli.app;\n        // var config = app.config;\n        // var modulesConfig = config.modules || [];\n\n        // var requestedModules = this.cmdArgs;\n        // var modulesAlreadyInstalled = modulesConfig;\n\n        // var modulesToInstall = filterAlreadyInstalled(\n        //     requestedModules, \n        //     modulesAlreadyInstalled\n        // );\n\n        // if (modulesToInstall.length < 1) {\n        //     this.reportWarning('No new modules to install');\n        //     process.exit();\n        // }\n\n        // var moduleInstaller = new ModuleInstaller(app);\n\n        // moduleInstaller.on('install.failed', (moduleName, error) => {\n        //     this.reportFailure(util.format(\n        //         'Unable to install module \"%s\": %s',\n        //         moduleName,\n        //         error.message\n        //     ));\n        // });\n\n        // moduleInstaller.on('install.succeeded', (moduleName) => {\n        //     this.reportSuccess(util.format(\n        //         'Successfully installed module \"%s\"',\n        //         moduleName\n        //     ));\n        // });\n\n        // modulesToInstall.forEach((moduleName) => {\n        //     moduleInstaller.install(modulesToInstall, app);\n        // });\n        \n    }\n\n}\n\n// function filterAlreadyInstalled (requestedModules, modulesAlreadyInstalled) {\n\n//     var modulesToInstall = [];\n\n//     requestedModules.forEach((moduleName) => {\n        \n//         if (modulesAlreadyInstalled.indexOf(moduleName) > -1) {\n//             return;\n//         }\n        \n//         modulesToInstall.push(moduleName);\n\n//     });\n\n//     return modulesToInstall;\n\n// }\n"]}