{"version":3,"sources":["../../src/cli-commands/abstract.es6"],"names":[],"mappings":"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","file":"abstract.js","sourcesContent":["import colors from 'colors/safe';\n\nvar CHECK = '✔';\nvar CROSS = '✘';\nvar SKULL = '☠';\nvar WARNING = '⚠';\n\nexport default class CliCommand {\n\n    constructor (xublitCli) {\n\n        initProps(this, xublitCli);\n\n    }\n\n    writeToStdout (string) {\n        process.stdout.write(string);\n    }\n\n    writeToStderr (string) {\n        process.stderr.write(string);\n    }\n\n    debug (error) {\n        \n        if (true !== this.debugOn) {\n            return;\n        }\n\n        this.writeToStdout(String(error.stack) + '\\n');\n\n    }\n\n    log (color, message) {\n        message = [...arguments].slice(1).join(' ');\n        this.writeToStdout(colors[color || 'white'](message) + '\\n');\n    }\n\n    reportSuccess (message) {\n        this.log('green', CHECK, [...arguments].join(' '));\n    }\n\n    reportWarning (message) {\n        this.log('yellow', WARNING, [...arguments].join(' '));\n    }\n\n    reportFailure (message) {\n        this.log('red', CROSS, [...arguments].join(' '));\n    }\n\n    critical (message) {\n        this.log('red', SKULL, [...arguments].join(' '));\n        process.exit(1);\n    }\n\n    run () {\n        throw newAbstractMethodError(this, 'run');\n    }\n\n}\n\nfunction initProps (cliCommand, xublitCli) {\n\n    var argv = [...process.argv].slice(3);\n\n    Object.defineProperties(cliCommand, {\n\n        xublitCli: {\n            value: xublitCli,\n        },\n\n        cmdArgs: {\n            get: function () {\n                return argv.filter((arg) => {\n\n                    if ('-' === arg.substr(0, 1)) {\n                        return false;\n                    }\n\n                    return true;\n\n                });\n            },\n        },\n\n        options: {\n            get: function () {\n                return argv.filter((arg) => {\n\n                    if ('-' !== arg.substr(0, 1)) {\n                        return false;\n                    }\n\n                    return true;\n\n                });\n            },\n        },\n\n        debugOn: {\n            get: function () {\n                return cliCommand.options.indexOf('--debug') > -1;\n            },\n        },\n\n    });\n\n}\n\nfunction newAbstractMethodError (cliCommand, methodName) {\n    \n    let className = cliCommand.constructor.name;\n    \n    return new Error(\n        `Abstract method ${methodName} not implemented in ${className}`\n    );\n    \n}\n"]}